<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>d_basep</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>clase=-1;//0 a 15
i_de=-1;
i_ar=-1;
i_iz=-1;
i_ab=-1;
depth=y*-10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(o_arbol){
    if(tile_layer_find(2000,x,y)){
        instance_destroy();}}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!instance_exists(ratoncalles)){
    s_limpiagui();
    instance_create(0,0,ratoncalles);
    with(ratoncalles){
        alarm[0]=1;}}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var i;
if(i_de!=-1){
    i=48;
    while(x+i!=i_de.x){
        if(tile_layer_find(2000,x+i,y)){
            instance_create(x+i,y,o_calle);
            alarm[2]=1;
            exit;}
        tile_add(d_baldo5,0,0,48,32,x+i-24,y-16,2000);
        i+=48;}}
if(i_ab!=-1){
    i=32;
    while(y+i!=i_ab.y){
        if(tile_layer_find(2000,x,y+i)){
            instance_create(x,y+i,o_calle);
            alarm[2]=1;
            exit;}
        tile_add(d_baldo6,0,0,48,32,x-24,y+i-16,2000);
        i+=32;}}
switch(clase){
    case 0:
        tile_add(d_baldo0,0,0,48,32,x-24,y-16,2000); break;
    case 1:
        tile_add(d_baldo1,0,0,48,32,x-24,y-16,2000); break;
    case 2:
        tile_add(d_baldo2,0,0,48,32,x-24,y-16,2000); break;
    case 3:
        tile_add(d_baldo3,0,0,48,32,x-24,y-16,2000); break;
    case 4:
        tile_add(d_baldo4,0,0,48,32,x-24,y-16,2000); break;
    case 5:
        tile_add(d_baldo5,0,0,48,32,x-24,y-16,2000); break;
    case 6:
        tile_add(d_baldo6,0,0,48,32,x-24,y-16,2000); break;
    case 7:
        tile_add(d_baldo7,0,0,48,32,x-24,y-16,2000); break;
    case 8:
        tile_add(d_baldo8,0,0,48,32,x-24,y-16,2000); break;
    case 9:
        tile_add(d_baldo9,0,0,48,32,x-24,y-16,2000); break;
    case 10:
        tile_add(d_baldo10,0,0,48,32,x-24,y-16,2000); break;
    case 11:
        tile_add(d_baldo11,0,0,48,32,x-24,y-16,2000); break;
    case 12:
        tile_add(d_baldo12,0,0,48,32,x-24,y-16,2000); break;
    case 13:
        tile_add(d_baldo13,0,0,48,32,x-24,y-16,2000); break;
    case 14:
        tile_add(d_baldo14,0,0,48,32,x-24,y-16,2000); break;
    case 15:
        tile_add(d_baldo15,0,0,48,32,x-24,y-16,2000); break;}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var i, aux;
if(i_de==-1){
    i=48;
    do{
        aux=collision_point(x+i,y,o_calle,0,1);
        if(aux){
            i_de=aux;
            aux.i_iz=id;
            i=0;}
        else if(collision_point(x+i,y,bloques,0,1) or collision_point(x+i,y,otrosbloques,0,1)){
            i=0;}
        else{
            i+=48;}}
    until(i==0 or i&gt;m_callew);}
if(i_iz==-1){
    i=48;
    do{
        aux=collision_point(x-i,y,o_calle,0,1);
        if(aux){
            i_iz=aux;
            aux.i_de=id;
            i=0;}
        else if(collision_point(x-i,y,bloques,0,1) or collision_point(x-i,y,otrosbloques,0,1)){
            i=0;}
        else{
            i+=48;}}
    until(i==0 or i&gt;m_callew);}
if(i_ab==-1){
    i=32;
    do{
        aux=collision_point(x,y+i,o_calle,0,1);
        if(aux){
            i_ab=aux;
            aux.i_ar=id;
            i=0;}
        else if(collision_point(x,y+i,bloques,0,1) or collision_point(x,y+i,otrosbloques,0,1)){
            i=0;}
        else{
            i+=32;}}
    until(i==0 or i&gt;m_calleh);}
if(i_ar==-1){
    i=32;
    do{
        aux=collision_point(x,y-i,o_calle,0,1);
        if(aux){
            i_ar=aux;
            aux.i_ab=id;
            i=0;}
        else if(collision_point(x,y-i,bloques,0,1) or collision_point(x,y-i,otrosbloques,0,1)){
            i=0;}
        else{
            i+=32;}}
    until(i==0 or i&gt;m_calleh);}
if(i_de!=-1){
    if(i_iz!=-1){
        if(i_ar!=-1){
            if(i_ab!=-1){
                clase=15;}
            else{
                clase=11;}}
        else{
            if(i_ab!=-1){
                clase=13;}
            else{
                clase=5;}}}
    else{
        if(i_ar!=-1){
            if(i_ab!=-1){
                clase=14;}
            else{
                clase=7;}}
        else{
            if(i_ab!=-1){
                clase=10;}
            else{
                clase=1;}}}}
else{
    if(i_iz!=-1){
        if(i_ar!=-1){
            if(i_ab!=-1){
                clase=12;}
            else{
                clase=8;}}
        else{
            if(i_ab!=-1){
                clase=9;}
            else{
                clase=3;}}}
    else{
        if(i_ar!=-1){
            if(i_ab!=-1){
                clase=6;}
            else{
                clase=2;}}
        else{
            if(i_ab!=-1){
                clase=4;}
            else{
                clase=0;}}}}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(clase==-1){
    draw_sprite(d_lacalle,1,x,y);}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
