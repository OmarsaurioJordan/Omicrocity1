<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth=1500;
xx=round(room_width/48);
yy=round(room_height/32);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_alpha(0.3);
var i;
for(i=2;i&lt;xx;i+=1){
    draw_line_colour(i*48,128,i*48,room_height-32,c_maroon,c_maroon);}
for(i=4;i&lt;yy;i+=1){
    draw_line_colour(96,i*32,room_width-48,i*32,c_maroon,c_maroon);}
if(instance_exists(ratoncalles)){
    draw_set_alpha(0.7);
    var k, aux, cant, cc;
    cant=instance_number(o_calle);
    for(i=0;i&lt;cant;i+=1){
        aux=instance_find(o_calle,i);
        k=0;
        cc=false;
        do{
            k+=1;
            if(collision_point(aux.x+k*48,aux.y,o_calle,1,1) or collision_point(aux.x+k*48,aux.y,ratoncalles,1,1)){
                cc=true;}
            else if(collision_point(aux.x+k*48,aux.y,bloques,1,1) or collision_point(aux.x+k*48,aux.y,otrosbloques,1,1)){
                k=m_callew/48;}}
        until(k&gt;=m_callew/48 or cc);
        if(cc){
            draw_line_colour(aux.x,aux.y,aux.x+k*48,aux.y,c_green,c_green);}
        k=0;
        cc=false;
        do{
            k+=1;
            if(collision_point(aux.x,aux.y+k*32,o_calle,1,1) or collision_point(aux.x,aux.y+k*32,ratoncalles,1,1)){
                cc=true;}
            else if(collision_point(aux.x,aux.y+k*32,bloques,1,1) or collision_point(aux.x,aux.y+k*32,otrosbloques,1,1)){
                k=m_calleh/32;}}
        until(k&gt;=m_calleh/32 or cc);
        if(cc){
            draw_line_colour(aux.x,aux.y,aux.x,aux.y+k*32,c_green,c_green);}}
    aux=ratoncalles;
    k=0;
    cc=false;
    do{
        k+=1;
        if(collision_point(aux.x+k*48,aux.y,o_calle,1,1)){
            cc=true;}
        else if(collision_point(aux.x+k*48,aux.y,bloques,1,1) or collision_point(aux.x+k*48,aux.y,otrosbloques,1,1)){
            k=m_callew/48;}}
    until(k&gt;=m_callew/48 or cc);
    if(cc){
        draw_line_colour(aux.x,aux.y,aux.x+k*48,aux.y,c_green,c_green);}
    k=0;
    cc=false;
    do{
        k+=1;
        if(collision_point(aux.x,aux.y+k*32,o_calle,1,1)){
            cc=true;}
        else if(collision_point(aux.x,aux.y+k*32,bloques,1,1) or collision_point(aux.x,aux.y+k*32,otrosbloques,1,1)){
            k=m_calleh/32;}}
    until(k&gt;=m_calleh/32 or cc);
    if(cc){
        draw_line_colour(aux.x,aux.y,aux.x,aux.y+k*32,c_green,c_green);}}
draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
